// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SyncedAnimator_Model {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SyncedAnimator_Model {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSyncedAnimator_Model(bb:flatbuffers.ByteBuffer, obj?:SyncedAnimator_Model):SyncedAnimator_Model {
  return (obj || new SyncedAnimator_Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSyncedAnimator_Model(bb:flatbuffers.ByteBuffer, obj?:SyncedAnimator_Model):SyncedAnimator_Model {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SyncedAnimator_Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

guid():string|null
guid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
guid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dontSave():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

values(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valuesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

state():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSyncedAnimator_Model(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addGuid(builder:flatbuffers.Builder, guidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, guidOffset, 0);
}

static addDontSave(builder:flatbuffers.Builder, dontSave:boolean) {
  builder.addFieldInt8(1, +dontSave, +false);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addState(builder:flatbuffers.Builder, state:number) {
  builder.addFieldInt32(3, state, 0);
}

static endSyncedAnimator_Model(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSyncedAnimator_ModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSyncedAnimator_ModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSyncedAnimator_Model(builder:flatbuffers.Builder, guidOffset:flatbuffers.Offset, dontSave:boolean, valuesOffset:flatbuffers.Offset, state:number):flatbuffers.Offset {
  SyncedAnimator_Model.startSyncedAnimator_Model(builder);
  SyncedAnimator_Model.addGuid(builder, guidOffset);
  SyncedAnimator_Model.addDontSave(builder, dontSave);
  SyncedAnimator_Model.addValues(builder, valuesOffset);
  SyncedAnimator_Model.addState(builder, state);
  return SyncedAnimator_Model.endSyncedAnimator_Model(builder);
}
}
